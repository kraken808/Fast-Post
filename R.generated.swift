//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `accentBlueMain`.
    static let accentBlueMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentBlueMain")
    /// Color `accentBluePlaceholder`.
    static let accentBluePlaceholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentBluePlaceholder")
    /// Color `accentBlueSecondary`.
    static let accentBlueSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentBlueSecondary")
    /// Color `accentBrown`.
    static let accentBrown = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentBrown")
    /// Color `accentGreen`.
    static let accentGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentGreen")
    /// Color `accentRedDark`.
    static let accentRedDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentRedDark")
    /// Color `accentRed`.
    static let accentRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "accentRed")
    /// Color `darkTransparent`.
    static let darkTransparent = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkTransparent")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentBlueMain", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBlueMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBlueMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentBluePlaceholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBluePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBluePlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentBlueSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBlueSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBlueSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentBrown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBrown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accentRedDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentRedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentRedDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkTransparent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkTransparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkTransparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentBlueMain", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBlueMain(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBlueMain.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentBluePlaceholder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBluePlaceholder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBluePlaceholder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentBlueSecondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBlueSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBlueSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentBrown", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBrown(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBrown.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accentRedDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentRedDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentRedDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darkTransparent", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkTransparent(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkTransparent.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `FiraSans-Bold.ttf`.
    static let firaSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraSans-Bold", pathExtension: "ttf")
    /// Resource file `FiraSans-Medium.ttf`.
    static let firaSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraSans-Medium", pathExtension: "ttf")
    /// Resource file `FiraSans-Regular.ttf`.
    static let firaSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraSans-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "FiraSans-Bold", withExtension: "ttf")`
    static func firaSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraSans-Medium", withExtension: "ttf")`
    static func firaSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraSans-Regular", withExtension: "ttf")`
    static func firaSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `FiraSans-Bold`.
    static let firaSansBold = Rswift.FontResource(fontName: "FiraSans-Bold")
    /// Font `FiraSans-Medium`.
    static let firaSansMedium = Rswift.FontResource(fontName: "FiraSans-Medium")
    /// Font `FiraSans-Regular`.
    static let firaSansRegular = Rswift.FontResource(fontName: "FiraSans-Regular")

    /// `UIFont(name: "FiraSans-Bold", size: ...)`
    static func firaSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaSansBold, size: size)
    }

    /// `UIFont(name: "FiraSans-Medium", size: ...)`
    static func firaSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaSansMedium, size: size)
    }

    /// `UIFont(name: "FiraSans-Regular", size: ...)`
    static func firaSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaSansRegular, size: size)
    }

    static func validate() throws {
      if R.font.firaSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraSans-Bold' could not be loaded, is 'FiraSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraSans-Medium' could not be loaded, is 'FiraSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraSans-Regular' could not be loaded, is 'FiraSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `fly_left_airplane`.
    static let fly_left_airplane = Rswift.ImageResource(bundle: R.hostingBundle, name: "fly_left_airplane")
    /// Image `fly_right_airplane`.
    static let fly_right_airplane = Rswift.ImageResource(bundle: R.hostingBundle, name: "fly_right_airplane")
    /// Image `ic_airplane`.
    static let ic_airplane = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_airplane")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_box_placeholder`.
    static let ic_box_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_box_placeholder")
    /// Image `ic_box`.
    static let ic_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_box")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_car`.
    static let ic_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car")
    /// Image `ic_chat`.
    static let ic_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat")
    /// Image `ic_chats`.
    static let ic_chats = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chats")
    /// Image `ic_checkbox_empty`.
    static let ic_checkbox_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_empty")
    /// Image `ic_checkbox_filled`.
    static let ic_checkbox_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_filled")
    /// Image `ic_checked_box`.
    static let ic_checked_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked_box")
    /// Image `ic_circle_empty`.
    static let ic_circle_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circle_empty")
    /// Image `ic_circle_filled`.
    static let ic_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circle_filled")
    /// Image `ic_circled_plus`.
    static let ic_circled_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circled_plus")
    /// Image `ic_documents`.
    static let ic_documents = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_documents")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_paper_airplane`.
    static let ic_paper_airplane = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paper_airplane")
    /// Image `ic_profile`.
    static let ic_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile")
    /// Image `ic_star_empty`.
    static let ic_star_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_empty")
    /// Image `ic_star_filled`.
    static let ic_star_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_filled")
    /// Image `ic_tenge`.
    static let ic_tenge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tenge")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fly_left_airplane", bundle: ..., traitCollection: ...)`
    static func fly_left_airplane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fly_left_airplane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fly_right_airplane", bundle: ..., traitCollection: ...)`
    static func fly_right_airplane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fly_right_airplane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_airplane", bundle: ..., traitCollection: ...)`
    static func ic_airplane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_airplane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_box", bundle: ..., traitCollection: ...)`
    static func ic_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_box_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_box_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_box_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car", bundle: ..., traitCollection: ...)`
    static func ic_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat", bundle: ..., traitCollection: ...)`
    static func ic_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chats", bundle: ..., traitCollection: ...)`
    static func ic_chats(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chats, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_empty", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_filled", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked_box", bundle: ..., traitCollection: ...)`
    static func ic_checked_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked_box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_circle_empty", bundle: ..., traitCollection: ...)`
    static func ic_circle_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_circle_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_circle_filled", bundle: ..., traitCollection: ...)`
    static func ic_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_circle_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_circled_plus", bundle: ..., traitCollection: ...)`
    static func ic_circled_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_circled_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_documents", bundle: ..., traitCollection: ...)`
    static func ic_documents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_documents, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paper_airplane", bundle: ..., traitCollection: ...)`
    static func ic_paper_airplane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paper_airplane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile", bundle: ..., traitCollection: ...)`
    static func ic_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_empty", bundle: ..., traitCollection: ...)`
    static func ic_star_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_filled", bundle: ..., traitCollection: ...)`
    static func ic_star_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tenge", bundle: ..., traitCollection: ...)`
    static func ic_tenge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tenge, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizedString` struct is generated, and contains static references to 20 localization keys.
    struct localizedString {
      /// Value: magnifyingglass
      static let magnifyingglass = Rswift.StringResource(key: "magnifyingglass", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Возможно, вам подойдут эти маршруты
      static let suggestion_txt = Rswift.StringResource(key: "suggestion_txt", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выход
      static let logout = Rswift.StringResource(key: "logout", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Дата
      static let date = Rswift.StringResource(key: "date", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Куда
      static let to_where = Rswift.StringResource(key: "to_where", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Мои поездки
      static let my_trips = Rswift.StringResource(key: "my_trips", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Мои посылки
      static let my_posts = Rswift.StringResource(key: "my_posts", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Найти людей для передачи посылки
      static let find_deliver = Rswift.StringResource(key: "find_deliver", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Объем
      static let weight = Rswift.StringResource(key: "weight", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Описание, примечания
      static let description = Rswift.StringResource(key: "description", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оставить заявку
      static let leave_request = Rswift.StringResource(key: "leave_request", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оставить заявку для отправки посылки
      static let leave_request_msg = Rswift.StringResource(key: "leave_request_msg", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Откуда
      static let from_where = Rswift.StringResource(key: "from_where", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поиск
      static let search = Rswift.StringResource(key: "search", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Редактировать профиль
      static let edit_profile = Rswift.StringResource(key: "edit_profile", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Стать исполнителем
      static let become_performer = Rswift.StringResource(key: "become_performer", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Стать отправителем
      static let become_sender = Rswift.StringResource(key: "become_sender", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Транспорт
      static let transport = Rswift.StringResource(key: "transport", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Уведомления
      static let notification = Rswift.StringResource(key: "notification", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Цена
      static let price = Rswift.StringResource(key: "price", tableName: "LocalizedString", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: magnifyingglass
      static func magnifyingglass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("magnifyingglass", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "magnifyingglass"
        }

        return NSLocalizedString("magnifyingglass", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Возможно, вам подойдут эти маршруты
      static func suggestion_txt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suggestion_txt", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "suggestion_txt"
        }

        return NSLocalizedString("suggestion_txt", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Выход
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Дата
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "date"
        }

        return NSLocalizedString("date", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Куда
      static func to_where(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to_where", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "to_where"
        }

        return NSLocalizedString("to_where", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Мои поездки
      static func my_trips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_trips", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "my_trips"
        }

        return NSLocalizedString("my_trips", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Мои посылки
      static func my_posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_posts", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "my_posts"
        }

        return NSLocalizedString("my_posts", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Найти людей для передачи посылки
      static func find_deliver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("find_deliver", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "find_deliver"
        }

        return NSLocalizedString("find_deliver", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Объем
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Описание, примечания
      static func description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "description"
        }

        return NSLocalizedString("description", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Оставить заявку
      static func leave_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leave_request", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "leave_request"
        }

        return NSLocalizedString("leave_request", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Оставить заявку для отправки посылки
      static func leave_request_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leave_request_msg", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "leave_request_msg"
        }

        return NSLocalizedString("leave_request_msg", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Откуда
      static func from_where(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from_where", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "from_where"
        }

        return NSLocalizedString("from_where", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Поиск
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Редактировать профиль
      static func edit_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit_profile", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "edit_profile"
        }

        return NSLocalizedString("edit_profile", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Стать исполнителем
      static func become_performer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("become_performer", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "become_performer"
        }

        return NSLocalizedString("become_performer", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Стать отправителем
      static func become_sender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("become_sender", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "become_sender"
        }

        return NSLocalizedString("become_sender", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Транспорт
      static func transport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transport", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "transport"
        }

        return NSLocalizedString("transport", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Уведомления
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "notification"
        }

        return NSLocalizedString("notification", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      /// Value: Цена
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price", tableName: "LocalizedString", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LocalizedString", preferredLanguages: preferredLanguages) else {
          return "price"
        }

        return NSLocalizedString("price", tableName: "LocalizedString", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
